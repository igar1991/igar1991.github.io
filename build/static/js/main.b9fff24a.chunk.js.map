{"version":3,"sources":["MainPage.js","App.js","serviceWorker.js","index.js"],"names":["photos","src","initialState","toptext","bottomtext","isTopDragging","isBottomDragging","topY","topX","bottomX","bottomY","MainPage","openImage","index","image","base_image","Image","base64","getBase64Image","setState","prevState","currentImage","modalIsOpen","currentImagebase64","toggle","changeText","event","currentTarget","name","value","getStateObj","e","type","rect","imageRef","getBoundingClientRect","xOffset","clientX","left","yOffset","clientY","top","stateObj","handleMouseDown","document","addEventListener","handleMouseMove","state","handleMouseUp","removeEventListener","convertSvgToImage","svg","svgRef","svgData","XMLSerializer","serializeToString","canvas","createElement","setAttribute","svgSize","width","height","img","btoa","unescape","encodeURIComponent","onload","getContext","drawImage","canvasdata","toDataURL","a","download","href","body","appendChild","click","this","wrh","console","log","newHeight","textStyle","fontFamily","fontSize","textTransform","fill","stroke","userSelect","className","NavbarBrand","map","key","style","cursor","alt","onClick","role","Modal","isOpen","ModalHeader","ModalBody","id","ref","el","xmlns","xmlnsXlink","xlinkHref","zIndex","x","y","dominantBaseline","textAnchor","onMouseDown","onMouseUp","FormGroup","Label","for","placeholder","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b9fff24a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Modal, ModalHeader, ModalBody, FormGroup, Label, NavbarBrand } from 'reactstrap';\r\nimport './App.css';\r\n\r\n\r\nconst photos = [\r\n  { src: './images/dank.png' },\r\n  { src: './images/band.png' }\r\n\r\n];\r\n\r\n\r\nconst initialState = {\r\n  toptext: \"\",\r\n  bottomtext: \"\",\r\n  isTopDragging: false,\r\n  isBottomDragging: false,\r\n  topY: \"10%\",\r\n  topX: \"50%\",\r\n  bottomX: \"50%\",\r\n  bottomY: \"90%\"\r\n}\r\n\r\nclass MainPage extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentImage: 0,\r\n      modalIsOpen: false,\r\n      currentImagebase64: null,\r\n      ...initialState\r\n    };\r\n  }\r\n\r\n  openImage = (index) => {\r\n    const image = photos[index];\r\n    const base_image = new Image();\r\n    base_image.src = image.src;\r\n    const base64 = this.getBase64Image(base_image);\r\n    this.setState(prevState => ({\r\n      currentImage: index,\r\n      modalIsOpen: !prevState.modalIsOpen,\r\n      currentImagebase64: base64,\r\n      ...initialState\r\n    }));\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState(prevState => ({\r\n      modalIsOpen: !prevState.modalIsOpen\r\n    }));\r\n  }\r\n\r\n  changeText = (event) => {\r\n    this.setState({\r\n      [event.currentTarget.name]: event.currentTarget.value\r\n    });\r\n  }\r\n\r\n  getStateObj = (e, type) => {\r\n    let rect = this.imageRef.getBoundingClientRect();\r\n    const xOffset = e.clientX - rect.left;\r\n    const yOffset = e.clientY - rect.top;\r\n    let stateObj = {};\r\n    if (type === \"bottom\") {\r\n      stateObj = {\r\n        isBottomDragging: true,\r\n        isTopDragging: false,\r\n        bottomX: `${xOffset}px`,\r\n        bottomY: `${yOffset}px`\r\n      }\r\n    } else if (type === \"top\") {\r\n      stateObj = {\r\n        isTopDragging: true,\r\n        isBottomDragging: false,\r\n        topX: `${xOffset}px`,\r\n        topY: `${yOffset}px`\r\n      }\r\n    }\r\n    return stateObj;\r\n  }\r\n\r\n  handleMouseDown = (e, type) => {\r\n    const stateObj = this.getStateObj(e, type);\r\n    document.addEventListener('mousemove', (event) => this.handleMouseMove(event, type));\r\n    this.setState({\r\n      ...stateObj\r\n    })\r\n  }\r\n\r\n  handleMouseMove = (e, type) => {\r\n    if (this.state.isTopDragging || this.state.isBottomDragging) {\r\n      let stateObj = {};\r\n      if (type === \"bottom\" && this.state.isBottomDragging) {\r\n        stateObj = this.getStateObj(e, type);\r\n      } else if (type === \"top\" && this.state.isTopDragging){\r\n        stateObj = this.getStateObj(e, type);\r\n      }\r\n      this.setState({\r\n        ...stateObj\r\n      });\r\n    }\r\n  };\r\n\r\n  handleMouseUp = (event) => {\r\n    document.removeEventListener('mousemove', this.handleMouseMove);\r\n    this.setState({\r\n      isTopDragging: false,\r\n      isBottomDragging: false\r\n    });\r\n  }\r\n\r\n  convertSvgToImage = () => {\r\n    const svg = this.svgRef;\r\n    let svgData = new XMLSerializer().serializeToString(svg);\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.setAttribute(\"id\", \"canvas\");\r\n    const svgSize = svg.getBoundingClientRect();\r\n    canvas.width = svgSize.width;\r\n    canvas.height = svgSize.height;\r\n    const img = document.createElement(\"img\");\r\n    img.setAttribute(\"src\", \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svgData))));\r\n    img.onload = function() {\r\n      canvas.getContext(\"2d\").drawImage(img, 0, 0);\r\n      const canvasdata = canvas.toDataURL(\"image/png\");\r\n      const a = document.createElement(\"a\");\r\n      a.download = \"meme.png\";\r\n      a.href = canvasdata;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n    };\r\n  }\r\n\r\n  getBase64Image(img) {\r\n    var canvas = document.createElement(\"canvas\");\r\n    canvas.width = img.width;\r\n    canvas.height = img.height;\r\n    var ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(img, 0, 0);\r\n    var dataURL = canvas.toDataURL(\"image/png\");\r\n    return dataURL;\r\n  }\r\n\r\n  render() {\r\n    const image = photos[this.state.currentImage];\r\n    const base_image = new Image();\r\n    base_image.src = image.src;\r\n    let wrh = base_image.width / base_image.height;\r\n    let newWidth = 400;\r\n    console.log(base_image.width, base_image.height)\r\n    let newHeight = newWidth / wrh;\r\n    console.log(newWidth, newHeight)\r\n    const textStyle = {\r\n      fontFamily: \"Impact\",\r\n      fontSize: \"50px\",\r\n      textTransform: \"uppercase\",\r\n      fill: \"#FFF\",\r\n      stroke: \"#000\",\r\n      userSelect: \"none\"\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"main-content\">\r\n          <div className=\"sidebar\">\r\n            <NavbarBrand href=\"/\">Meme generator</NavbarBrand>\r\n            \r\n            <p>\r\nClick on the desired template and you can add upper and lower text to the meme-template, move the text and save the image by loading it.            </p>\r\n          </div>\r\n          <div className=\"content\">\r\n            {photos.map((image, index) => (\r\n              <div className=\"image-holder\" key={image.src}>\r\n                <span className=\"meme-top-caption\">Top text</span>\r\n                <img\r\n                  style={{\r\n                    width: \"100%\",\r\n                    cursor: \"pointer\",\r\n                    height: \"100%\"\r\n                  }}\r\n                  alt={index}\r\n                  src={image.src}\r\n                  onClick={() => this.openImage(index)}\r\n                  role=\"presentation\"\r\n                />\r\n              <span className=\"meme-bottom-caption\">Bottom text</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <Modal className=\"meme-gen-modal\" isOpen={this.state.modalIsOpen}>\r\n          <ModalHeader toggle={this.toggle}>Make-a-Meme</ModalHeader>\r\n          <ModalBody>\r\n    \r\n            <svg\r\n              \r\n              id=\"svg_ref\"\r\n              height={newHeight}\r\n              width={newWidth}\r\n              ref={el => { this.svgRef = el }}\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              xmlnsXlink=\"http://www.w3.org/1999/xlink\">\r\n              <image\r\n                ref={el => { this.imageRef = el }}\r\n                xlinkHref={this.state.currentImagebase64}\r\n                height={newHeight}\r\n                width={newWidth}\r\n              />\r\n              <text\r\n                style={{ ...textStyle, zIndex: this.state.isTopDragging ? 4 : 1 }}\r\n                x={this.state.topX}\r\n                y={this.state.topY}\r\n                dominantBaseline=\"middle\"\r\n                textAnchor=\"middle\"\r\n                onMouseDown={event => this.handleMouseDown(event, 'top')}\r\n                onMouseUp={event => this.handleMouseUp(event, 'top')}\r\n              >\r\n                  {this.state.toptext}\r\n              </text>\r\n              <text\r\n                style={textStyle}\r\n                dominantBaseline=\"middle\"\r\n                textAnchor=\"middle\"\r\n                x={this.state.bottomX}\r\n                y={this.state.bottomY}\r\n                onMouseDown={event => this.handleMouseDown(event, 'bottom')}\r\n                onMouseUp={event => this.handleMouseUp(event, 'bottom')}\r\n              >\r\n                  {this.state.bottomtext}\r\n              </text>\r\n            </svg>\r\n          \r\n            <div className=\"meme-form\">\r\n              <FormGroup>\r\n                <Label for=\"toptext\">Top Text</Label>\r\n                <input className=\"form-control\" type=\"text\" name=\"toptext\" id=\"toptext\" placeholder=\"Add text to the top\" onChange={this.changeText} />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for=\"bottomtext\">Bottom Text</Label>\r\n                <input className=\"form-control\" type=\"text\" name=\"bottomtext\" id=\"bottomtext\" placeholder=\"Add text to the bottom\" onChange={this.changeText} />\r\n              </FormGroup>\r\n              <button onClick={() => this.convertSvgToImage()} className=\"btn btn-primary\">Download Meme!</button>\r\n            </div>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\nimport MainPage from './MainPage'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <MainPage />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}